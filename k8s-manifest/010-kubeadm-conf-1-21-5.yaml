apiVersion: kubeadm.k8s.io/v1beta2
kind: InitConfiguration
bootstrapTokens:
- token: "c2t0rj.cofbfnwwrb387890"
localAPIEndpoint:
  advertiseAddress: 172.17.13.10
  bindPort: 6443
nodeRegistration:
  criSocket: unix:///run/containerd/containerd.sock
# after 1.22 (v1beta3)
#  imagePullPolicy: IfNotPresent
##
  taints: null
  kubeletExtraArgs:
    runtime-cgroups: "/system.slice/containerd.service"
    rotate-server-certificates: "true"
    protect-kernel-defaults: "true"
---
apiVersion: kubeadm.k8s.io/v1beta2
kind: ClusterConfiguration
clusterName: k8s-main
# https://kubernetes.io/releases/
kubernetesVersion: 1.21.5
certificatesDir: /etc/kubernetes/pki
# OR Vip ip or external lb ip
controlPlaneEndpoint: "172.17.13.10:6443"
etcd:
  local:
    dataDir: /var/lib/etcd
networking:
  serviceSubnet: "10.96.0.0/12"
  podSubnet: "10.43.0.0/16"
  dnsDomain: "cluster.local"
apiServer:
  certSANs:
  - "*.mydomain.intra"
  - "172.17.9.10"
  - "10.0.2.15"
  extraArgs:
    authorization-mode: "Node,RBAC"
    # force PodSecurityPolicy
    enable-admission-plugins: "NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,PodSecurityPolicy"
    kubelet-certificate-authority: "/etc/kubernetes/pki/ca.crt"
    encryption-provider-config: "/etc/kubernetes/etcd-encription.yaml"
    insecure-port: "0"
    profiling: "false"
    anonymous-auth: "true"
    audit-log-maxage: "30"
    audit-log-maxbackup: "10"
    audit-log-maxsize: "100"
    audit-log-path: "/var/log/kube-audit/audit.log"
    audit-policy-file: "/etc/kubernetes/audit-policy.yaml"
    service-node-port-range: "30000-50000"
  extraVolumes:
  - name: "audit-config"
    hostPath: "/etc/kubernetes/audit-policy.yaml"
    mountPath: "/etc/kubernetes/audit-policy.yaml"
    readOnly: true
    pathType: "File"
  - name: "audit-log"
    hostPath: "/var/log/kube-audit"
    mountPath: "/var/log/kube-audit"
    pathType: "DirectoryOrCreate"
  - name: "etc-kubernetes-etcd-enc"
    hostPath: "/etc/kubernetes/etcd-encription.yaml"
    mountPath: "/etc/kubernetes/etcd-encription.yaml"
    readOnly: true
scheduler:
  extraArgs:
    profiling: "false"
controllerManager:
  extraArgs:
    profiling: "false"
dns: {}
---
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
enableServer: true
failSwapOn: false
cgroupDriver: "systemd"
serverTLSBootstrap: true
rotateCertificates: true
featureGates:
# before 1.21
#    RotateKubeletClientCertificate: true
    RotateKubeletServerCertificate: true
# after 1.22
#    SeccompDefault: true
#seccompDefault: true
##
protectKernelDefaults: true
readOnlyPort: 0
---
apiVersion: kubeadm.k8s.io/v1beta2
kind: JoinConfiguration
discovery:
  bootstrapToken:
    token: "c2t0rj.cofbfnwwrb387890"
nodeRegistration:
  criSocket: unix:///run/containerd/containerd.sock
# after 1.22 (v1beta3)
#  imagePullPolicy: IfNotPresent
##
  taints: null
  kubeletExtraArgs:
    runtime-cgroups: "/system.slice/containerd.service"
    rotate-server-certificates: "true"
    protect-kernel-defaults: "true"

# https://kubernetes.io/docs/reference/config-api/kubeadm-config.v1beta2/
# https://kubernetes.io/docs/reference/config-api/kubelet-config.v1beta1/
# https://github.com/mritd/kubeadm-config-pack/blob/master/pack/conf/kubeadm.yaml
