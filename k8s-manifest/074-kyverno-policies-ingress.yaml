---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: unique-ingress-host
  annotations:
    policies.kyverno.io/title: Unique Ingress Host
    policies.kyverno.io/category: Sample
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Ingress
    policies.kyverno.io/minversion: 1.3.2
    policies.kyverno.io/description: >-
      An Ingress host is a URL at which services may be made available externally. In most cases,
      these hosts should be unique across the cluster to ensure no routing conflicts occur.
      This policy checks an incoming Ingress resource to ensure its hosts are unique to the cluster.
      It also ensures that only a single host may be specified in a given manifest.
spec:
  validationFailureAction: audit
  background: false
  rules:
    - name: check-single-host
      match:
        resources:
          kinds:
            - Ingress
      context:
        - name: hosts
          apiCall:
            urlPath: "/apis/networking.k8s.io/v1/ingresses"
            jmesPath: "items[].spec.rules[].host"
      preconditions:
        all:
        - key: "{{ request.operation }}"
          operator: Equals
          value: CREATE
        - key: "{{ request.object.spec.rules[].host }}"
          operator: In
          value: "{{ hosts }}"
      validate:
        message: "The Ingress host name must be unique."
        deny: {}
    - name: deny-multiple-hosts
      match:
        resources:
          kinds:
            - Ingress
      preconditions:
        all:
        - key: "{{ request.operation }}"
          operator: Equals
          value: CREATE
        - key: "{{ request.object.spec.rules[].host | length(@)}}"
          operator: GreaterThan
          value: 1
      validate:
        message: "An Ingress resource may only contain a single host entry."
        deny: {}
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: unique-ingress-path
  annotations:
    policies.kyverno.io/title: Unique Ingress Path
    policies.kyverno.io/category: Sample
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Ingress
    policies.kyverno.io/minversion: 1.3.6
    policies.kyverno.io/description: >-
      Just like the need to ensure uniqueness among Ingress hosts, there is a need to have the paths
      be unique as well. This policy checks an incoming Ingress to ensure its root path does not conflict with another
      root path in a different Namespace. It requires that incoming Ingress resources have a single
      rule with a single path only and assumes the root path is specified explicitly in an
      existing Ingress rule (ex., when blocking /foo/bar /foo must exist by itself and not part of
      /foo/baz).
spec:
  validationFailureAction: audit
  background: false
  rules:
    - name: check-path
      match:
        resources:
          kinds:
            - Ingress
      context:
        # Looks up the Ingress paths across the whole cluster.
        - name: allpaths
          apiCall:
            urlPath: "/apis/networking.k8s.io/v1/ingresses"
            jmesPath: "items[].spec.rules[].http.paths[].path"
        # Looks up the Ingress paths in the same Namespace where the incoming request is targeted.
        - name: nspath
          apiCall:
            urlPath: "/apis/networking.k8s.io/v1/namespaces/{{request.object.metadata.namespace}}/ingresses"
            jmesPath: "items[].spec.rules[].http.paths[].path"
      preconditions:
        - key: "{{request.operation}}"
          operator: Equals
          value: "CREATE"
      validate:
        message: >-
          The root path /{{request.object.spec.rules[].http.paths[].path | to_string(@) | split(@, '/') | [1]}} exists
          in another Ingress rule elsewhere in the cluster.
        deny:
          conditions:
            all:
              # Deny if the root path of the request exists somewhere else in the cluster other than the same Namespace.
              - key: /{{request.object.spec.rules[].http.paths[].path | to_string(@) | split(@, '/') | [1]}}
                operator: In
                value: "{{allpaths}}"
              - key: /{{request.object.spec.rules[].http.paths[].path | to_string(@) | split(@, '/') | [1]}}
                operator: NotIn
                value: "{{nspath}}"
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: cert-manager-restrict-issuer
  annotations:
    policies.kyverno.io/title: Restrict issuer
    policies.kyverno.io/category: Cert-Manager
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Certificate
    policies.kyverno.io/description: >-
      Certificates for trusted domains should always be steered to a controlled issuer to
      ensure the chain of trust is appropriate for that application. Users may otherwise be
      able to create their own issuers and sign certificates for other domains. This policy
      ensures that a certificate request for a specific domain uses a designated ClusterIssuer.
spec:
  validationFailureAction: audit
  background: true
  rules:
  - name: restrict-corp-cert-issuer
    match:
      resources:
        kinds:
        - Certificate
    validate:
      message: When requesting a cert for this domain, you must use our corporate issuer.
      pattern:
        spec:
          (dnsNames): ["*.k8s.intra"]
          issuerRef:
            name: ca-issuer
            kind: ClusterIssuer
            group: cert-manager.io
