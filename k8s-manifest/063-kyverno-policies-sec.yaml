---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: verify-image
  annotations:
    policies.kyverno.io/title: Verify Image
    policies.kyverno.io/category: Sample
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/minversion: 1.4.2
    policies.kyverno.io/description: >-
      Using the Cosign project, OCI images may be signed to ensure supply chain
      security is maintained. Those signatures can be verified before pulling into
      a cluster. This policy checks the signature of an image repo called
      ghcr.io/kyverno/test-verify-image to ensure it has been signed by verifying
      its signature against the provided public key. This policy serves as an illustration for
      how to configure a similar rule and will require replacing with your image(s) and keys.
spec:
  validationFailureAction: enforce
  background: false
  rules:
    - name: verify-image
      match:
        resources:
          kinds:
            - Pod
      verifyImages:
      - image: "ghcr.io/kyverno/test-verify-image:*"
        key: |-
          -----BEGIN PUBLIC KEY-----
          MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE8nXRh950IZbRj8Ra/N9sbqOPZrfM
          5/KAQN0/KjHcorm/J5yctVd7iEcnessRQjU917hmKO6JWVGHpDguIyakZA==
          -----END PUBLIC KEY-----
      - image: "docker.io/devopstales/testimage:*"
        key: |-
          -----BEGIN PUBLIC KEY-----
          MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEL53O1V5FP2Vaa60BTwRjrOxhuu5C
          iB/mODf/V2eiGw+WbA689ZZRjWwXCf+4jwzfRSrik0YvTCMqvl3BDaPG2A==
          -----END PUBLIC KEY-----
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: restrict-automount-sa-token
  annotations:
    policies.kyverno.io/title: Restrict Auto-Mount of Service Account Tokens
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/description: >-
      Kubernetes automatically mounts ServiceAccount credentials in each Pod. 
      The ServiceAccount may be assigned roles allowing Pods to access API resources.
      Blocking this ability is an extension of the least privilege best practice and should
      be followed if Pods do not need to speak to the API server to function. 
      This policy ensures that mounting of these ServiceAccount tokens is blocked.
spec:
  rules:
  - name: remove-sa-token
    preconditions:
    - key: "{{ request.object.metadata.name }}"
      operator: NotIn
      values: ["helm-*"]
    match:
      resources:
        kinds:
        - Pod
    exclude:
      resources:
        namespaces:
        - kube-system
        - longhorn-system
    mutate:
      patchStrategicMerge:
        spec:
          automountServiceAccountToken: false
          enableServiceLinks: false
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: drop-cap-net-raw
  annotations:
    policies.kyverno.io/title: Drop CAP_NET_RAW
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/minversion: 1.4.3
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/description: >-
      Capabilities permit privileged actions without giving full root access. The
      CAP_NET_RAW capability, enabled by default, allows processes in a container to
      forge packets and bind to any interface potentially leading to MitM attacks.
      This policy ensures that all containers explicitly drop the CAP_NET_RAW
      ability.      
spec:
  validationFailureAction: audit
  background: false
  rules:
  - name: drop-cap-net-raw
    match:
      resources:
        kinds:
        - Pod
    validate:
      message: The capability CAP_NET_RAW or NET_RAW must be explicitly dropped.
      deny:
        conditions:
          any:
          # Get all the entries in each initContainers and containers drop[] array and ensures that every instance contains NET_RAW. If not, deny the request.
          # backticks around false statement (in the key) implies a JSON object and so the value must not be in quotes or is interpreted as a string.
          - key: "{{request.object.spec.[containers, initContainers][].securityContext.capabilities.drop.contains(@, 'NET_RAW') | !contains(@, `false`)}}"
            operator: Equals
            value: false
          - key: "{{request.object.spec.[containers, initContainers][].securityContext.capabilities.drop.contains(@, 'CAP_NET_RAW') | !contains(@, `false`)}}"
            operator: Equals
            value: false
#---
#apiVersion: kyverno.io/v1
#kind: ClusterPolicy
#metadata:
#  name: require-ro-rootfs
#  annotations:
#    policies.kyverno.io/title: Require Read-Only Root Filesystem
#    policies.kyverno.io/category: Best Practices
#    policies.kyverno.io/severity: medium
#    policies.kyverno.io/subject: Pod
#    policies.kyverno.io/description: >-
#      A read-only root file system helps to enforce an immutable infrastructure strategy; 
#      the container only needs to write on the mounted volume that persists the state. 
#      An immutable root filesystem can also prevent malicious binaries from writing to the 
#      host system. This policy validates that containers define a securityContext
#      with `readOnlyRootFilesystem: true`.      
#spec:
#  rules:
#  - name: validate-readOnlyRootFilesystem
#    preconditions:
#    - key: "{{ request.object.metadata.name }}"
#      operator: NotIn
#      values: ["helm-*"]
#    match:
#      resources:
#        kinds:
#        - Pod
#    exclude:
#      resources:
#        namespaces:
#        - kube-system
#        - longhorn-system
#    mutate:
#      patchStrategicMerge:
#        spec:
#          containers:
#          - (name): "*"
#            securityContext:
#              readOnlyRootFilesystem: true
